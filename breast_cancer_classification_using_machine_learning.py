# -*- coding: utf-8 -*-
"""Breast Cancer Classification Using Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h6MYM36h5kGNE5dfAvfxKzFou3KnfCOl

Importing Libraries
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Data Processing"""

# Loading the data from sklearn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

# Loading the data
data_frame = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)

# From the dataframe, we print the first 5 rows
data_frame.head()

# 'target' added to data_frame
data_frame['label'] = breast_cancer_dataset.target

# Last 5 rows printed
data_frame.tail()

# No. of rows and columns from data frame in dataset
data_frame.shape

# Gathering information from dataset
data_frame.info()

# Checking if any missing values present
data_frame.isnull().sum()

# Statistical measures
data_frame.describe()

# Checking Target Variable Distribution
data_frame['label'].value_counts()

"""If 1 -> Benign

If 0 -> Malignant
"""

data_frame.groupby('label').mean()

"""Target and Feature Separation"""

X = data_frame.drop(columns = 'label', axis = 1)
Y = data_frame['label']

print(X)

print(Y)

"""Split the data into training data & testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training The Model

Using Logistic Regression
"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation"""

#Accuracy Score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on training data = ', training_data_accuracy)

#Accuracy Score on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data = ', test_data_accuracy)

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)
#Change Input array into numpy array
input_data_as_numpy_array = np.asarray(input_data)
#Reshape numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print('The Breast Cancer is Malignant')
else:
  print('The Breast Cancer is Benign')